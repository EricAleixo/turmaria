<div class="drawer lg:drawer-open bg-gray-100">
  <input id="my-drawer" type="checkbox" class="drawer-toggle" />

  <div class="drawer-content flex flex-col items-center">
    <div class="w-full p-4">
      <div class="flex items-center mb-6 lg:hidden">
        <label for="my-drawer" class="btn btn-square btn-ghost">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="inline-block w-6 h-6 stroke-current"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path></svg>
        </label>
        <h1 class="text-xl font-bold ml-2">Adicionar Aluno</h1>
      </div>

      <main class="w-full max-w-4xl mx-auto">
        <%= render 'form', aluno: @aluno %>
      </main>
    </div>
  </div>

  <aside class="drawer-side">
    <label for="my-drawer" aria-label="close sidebar" class="drawer-overlay"></label>

    <div class="menu p-4 w-72 min-h-full bg-white text-base-content">
      <h1 class="text-2xl font-bold mb-8 px-4">
        Dashboard
      </h1>
      
      <ul>
        <li class="mb-2">
          <%= link_to "Escolas", new_escola_path, class: "block p-3 rounded-lg hover:bg-gray-100" %>
        </li>
        <li class="mb-2">
          <%= link_to "Turmas", new_turma_path, class: "block p-3 rounded-lg hover:bg-gray-100" %>
        </li>
        <li class="mb-2">
          <%= link_to "Alunos", new_aluno_path, class: "block p-3 rounded-lg hover:bg-gray-100" %>
        </li>
      </ul>
    </div>
  </aside>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const nextButton = document.getElementById('next-step-1');
    const prevButton = document.getElementById('prev-step-2');
    const step1 = document.getElementById('step-1');
    const step2 = document.getElementById('step-2');
    
    if (nextButton && step1 && step2) {
      nextButton.addEventListener('click', () => {
        step1.classList.add('hidden');
        step2.classList.remove('hidden');
      });
    }

    if (prevButton && step1 && step2) {
      prevButton.addEventListener('click', () => {
        step2.classList.add('hidden');
        step1.classList.remove('hidden');
      });
    }

    const uploadAreas = document.querySelectorAll('.upload-area');
    const uploadInputs = document.querySelectorAll('input[type="file"]');
    const uploadErrorMessage = document.getElementById('upload-error-message');
    const FILE_SIZE_LIMIT_BYTES = 716800;
    const MAX_FILES = 2;

    uploadAreas.forEach(area => {
      const inputId = area.dataset.inputId;
      const fileInput = document.getElementById(inputId);

      area.addEventListener('dragover', (event) => {
        event.preventDefault();
        area.classList.add('border-blue-500'); 
      });
      
      area.addEventListener('dragleave', (event) => {
        area.classList.remove('border-blue-500');
      });

      area.addEventListener('drop', (event) => {
        event.preventDefault();
        area.classList.remove('border-blue-500');
        
        const files = event.dataTransfer.files;
        handleFiles(files, fileInput);
      });
    });

    uploadInputs.forEach(fileInput => {
      fileInput.addEventListener('change', (event) => {
        const files = event.target.files;
        handleFiles(files, fileInput);
      });
    });

    function handleFiles(files, fileInput) {
      const filesArray = Array.from(files);
      const uploadedFilesList = document.getElementById(fileInput.id.replace('-upload', '-files-list'));
      const currentFilesCount = uploadedFilesList.childElementCount;

      uploadErrorMessage.classList.add('hidden');
      
      if (currentFilesCount + filesArray.length > MAX_FILES) {
        uploadErrorMessage.querySelector('span').textContent = `Limite de ${MAX_FILES} arquivos para este tipo de documento atingido.`;
        uploadErrorMessage.classList.remove('hidden');
        return;
      }
      
      const dataTransfer = new DataTransfer();
      const existingFiles = Array.from(fileInput.files);
      existingFiles.forEach(f => dataTransfer.items.add(f));

      filesArray.forEach(file => {
        if (file.size > FILE_SIZE_LIMIT_BYTES) {
          uploadErrorMessage.querySelector('span').textContent = `O arquivo "${file.name}" excede o tamanho m√°ximo de 700 KB.`;
          uploadErrorMessage.classList.remove('hidden');
          return;
        }
        dataTransfer.items.add(file);
        addFileToList(file, uploadedFilesList, fileInput);
      });
      
      fileInput.files = dataTransfer.files;
    }

    function addFileToList(file, listElement, fileInput) {
      const listItem = document.createElement('li');
      listItem.classList.add('flex', 'items-center', 'justify-between', 'p-4', 'border-b', 'last:border-b-0');
      
      const fileInfo = document.createElement('div');
      fileInfo.classList.add('flex', 'items-center', 'gap-4');

      const fileIcon = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6 text-gray-500">
          <path fill-rule="evenodd" d="M19.5 7.5a3 3 0 00-3-3h-8.25a3 3 0 00-3 3v9a3 3 0 003 3h8.25a3 3 0 003-3v-9zM15 11.25a.75.75 0 00-1.5 0v3.75a.75.75 0 001.5 0v-3.75z" clip-rule="evenodd" />
        </svg>
      `;

      fileInfo.innerHTML = `
        <div class="flex items-center gap-2">
          ${fileIcon}
          <div>
            <p class="text-sm font-semibold">${file.name}</p>
            <p class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(2)} MB</p>
          </div>
        </div>
      `;
      
      const deleteButton = document.createElement('button');
      deleteButton.classList.add('text-red-500', 'hover:text-red-700', 'transition', 'p-2', 'rounded-full', 'hover:bg-gray-200');
      deleteButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
          <path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
        </svg>
      `;
      
      deleteButton.addEventListener('click', () => {
        listItem.remove();
        
        const dataTransfer = new DataTransfer();
        const inputFiles = Array.from(fileInput.files);
        inputFiles.filter(f => f.name !== file.name).forEach(f => dataTransfer.items.add(f));
        fileInput.files = dataTransfer.files;
      });

      listElement.appendChild(listItem);
      listItem.appendChild(fileInfo);
      listItem.appendChild(deleteButton);
    }
  });
</script>